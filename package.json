{
  "name": "core-lang",
  "description": "Classes that should be in the core of the JavaScript language. Collections. Promises. Reflection. Working and tested from IE8+.",
  "author": {
    "name": "Bogdan Mustiata",
    "email": "bogdan.mustiata@gmail.com"
  },
  "version": "1.0.0",
  "dependencies": {
    "core-promise": "^0.2.3"
  },
  "devDependencies": {
    "dts-generator": "1.5.0",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-typescript": "^0.7.0"
  },
  "keywords": [],
  "main": "./lib/Iterable.js",
  "bugs": {
    "url": "https://github.com/bmustiata/core-lang/issues"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/bmustiata/core-lang/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bmustiata/core-lang.git"
  },
  "readme": "# core-lang\nClasses that should be in the JavaScript language itself. The collections have a rich API to\nwork with the data, full promises support, [well written documentation](https://github.com/bmustiata/core-lang/blob/master/src/main/core/Iterable.ts) and TypeScript definitions.\n## Usage\nAvailable classes:\n<img src=\"doc/class-diagram.png\">\n## Collections\nAll collections inherit from XIterable. It returns an iterator and offers the classic Array methods of iteration,\nalso filter, map/reduce, etc. with the same signature.\nIn addition some methods are added (some of them inspired from groovy) to make chaining more easier (such as `groupBy`,\n`transform`, `first` or `butFirst`).\nLast but not least the collections have full `Promise`s support, and allow processing of their content using the `Promise`\nAPI. For example, assuming that our collection contains promises, we can:\n```javascript\nlist([1,2,3,4])\n    .map(Promise.resolve, Promise) // make them promises\n    .mapPromise(function(it) {\n        // mapPromise first resolves the items in the collection,\n        // then it applies the mapping function\n        // all the items are resolved at his stage, so we have the initial\n        // array, being iterated over. We create new promises.\n        return Promise.resolve(it * it);\n    }).then(function(collection) {\n        // not only the value before mapping gets resolved, but also\n        // the result gets first Promise.resolved and only after\n        // added back into the collection\n        assert.equal([1,4,9,16], collection.asArray());\n    });\n```\nFurthermore since the collections are written in TypeScript, the module embeds the .d.ts file, so you get full\nautocomplete and documentation support from the IDE (pictured Visual Studio Code)\n<img src=\"doc/vscode-autocomplete.png\"/>\n## ChangeLog\n* v.1.0.0  2015-08-31  Initial release.\n",
  "readmeFilename": "README.md",
  "homepage": "http://blog.ciplogic.com"
}
